
#include "ast.h"

/* Generic abstract syntax tree as a m-ary tree. Each entry point (node) in
   the vector is a fixed-size collection of heterogeneous values. */
std::vector<struct ast_t> absyn_tree;

std::string pp_type(Symbol ty) {
  if      (ty == instr)  return "instruction";
  else if (ty == ident)  return "identifier";
  else if (ty == direc)  return "directive";
  else if (ty == imm)    return "immediate";
  else if (ty == reg)    return "register";
  else                   return "unidentified type";
}

int det_reg_val(std::string r) {
  if      (r == "r0")  return 0;
  else if (r == "r1")  return 1;
  else if (r == "r2")  return 2;
  else if (r == "r3")  return 3;
  else if (r == "r4")  return 4;
  else if (r == "r5")  return 5;
  else if (r == "r6")  return 6;
  else if (r == "r7")  return 7;
  else if (r == "r8")  return 8;
  else if (r == "r9")  return 9;
  else if (r == "r10") return 10;
  return -1;
}

std::string pp_subtype(std::any e) {
  if      (IS_OF_TYPE(e, regs))       return "regs";
  else if (IS_OF_TYPE(e, dir))        return "directive";
  else if (IS_OF_TYPE(e, imm_int))    return "imm_int";
  else if (IS_OF_TYPE(e, imm_float))  return "imm_float";
  else if (IS_OF_TYPE(e, add))        return "add";
  else if (IS_OF_TYPE(e, sub))        return "sub";
  else if (IS_OF_TYPE(e, mul))        return "mul";
  else if (IS_OF_TYPE(e, div_ins))    return "div";
  else if (IS_OF_TYPE(e, or_ins))     return "or";
  else if (IS_OF_TYPE(e, and_ins))    return "and";
  else if (IS_OF_TYPE(e, lsh))        return "lsh";
  else if (IS_OF_TYPE(e, rsh))        return "rsh";
  else if (IS_OF_TYPE(e, neg))        return "neg";
  else if (IS_OF_TYPE(e, mod))        return "mod";
  else if (IS_OF_TYPE(e, xor_ins))    return "xor";
  else if (IS_OF_TYPE(e, mov))        return "mov";
  else if (IS_OF_TYPE(e, arsh))       return "arsh";
  else if (IS_OF_TYPE(e, add32))      return "add32";
  else if (IS_OF_TYPE(e, sub32))      return "sub32";
  else if (IS_OF_TYPE(e, mul32))      return "mul32";
  else if (IS_OF_TYPE(e, div32))      return "div32";
  else if (IS_OF_TYPE(e, or32))       return "or32";
  else if (IS_OF_TYPE(e, and32))      return "and32";
  else if (IS_OF_TYPE(e, lsh32))      return "lsh32";
  else if (IS_OF_TYPE(e, rsh32))      return "rsh32";
  else if (IS_OF_TYPE(e, neg32))      return "neg32";
  else if (IS_OF_TYPE(e, mod32))      return "mod32";
  else if (IS_OF_TYPE(e, xor32))      return "xor32";
  else if (IS_OF_TYPE(e, mov32))      return "mov32";
  else if (IS_OF_TYPE(e, arsh32))     return "arsh32";
  else if (IS_OF_TYPE(e, le16))       return "le16";
  else if (IS_OF_TYPE(e, le32))       return "le32";
  else if (IS_OF_TYPE(e, le64))       return "le64";
  else if (IS_OF_TYPE(e, be16))       return "be16";
  else if (IS_OF_TYPE(e, be32))       return "be32";
  else if (IS_OF_TYPE(e, be64))       return "be64";
  else if (IS_OF_TYPE(e, addx16))     return "addx16";
  else if (IS_OF_TYPE(e, addx32))     return "addx32";
  else if (IS_OF_TYPE(e, addx64))     return "addx64";
  else if (IS_OF_TYPE(e, andx16))     return "andx16";
  else if (IS_OF_TYPE(e, andx32))     return "andx32";
  else if (IS_OF_TYPE(e, andx64))     return "andx64";
  else if (IS_OF_TYPE(e, orx16))      return "orx16";
  else if (IS_OF_TYPE(e, orx32))      return "orx32";
  else if (IS_OF_TYPE(e, orx64))      return "orx64";
  else if (IS_OF_TYPE(e, xorx16))     return "xorx16";
  else if (IS_OF_TYPE(e, xorx32))     return "xorx32";
  else if (IS_OF_TYPE(e, xorx64))     return "xorx64";
  else if (IS_OF_TYPE(e, addfx16))    return "addfx16";
  else if (IS_OF_TYPE(e, addfx32))    return "addfx32";
  else if (IS_OF_TYPE(e, addfx64))    return "addfx64";
  else if (IS_OF_TYPE(e, andfx16))    return "andfx16";
  else if (IS_OF_TYPE(e, andfx32))    return "andfx32";
  else if (IS_OF_TYPE(e, andfx64))    return "andfx64";
  else if (IS_OF_TYPE(e, orfx16))     return "orfx16";
  else if (IS_OF_TYPE(e, orfx32))     return "orfx32";
  else if (IS_OF_TYPE(e, orfx64))     return "orfx64";
  else if (IS_OF_TYPE(e, xorfx16))    return "xorfx16";
  else if (IS_OF_TYPE(e, xorfx32))    return "xorfx32";
  else if (IS_OF_TYPE(e, xorfx64))    return "xorfx64";
  else if (IS_OF_TYPE(e, xchgx16))    return "xchgx16";
  else if (IS_OF_TYPE(e, xchgx32))    return "xchgx32";
  else if (IS_OF_TYPE(e, xchgx64))    return "xchgx64";
  else if (IS_OF_TYPE(e, cmpxchgx16)) return "cmpxchgx16";
  else if (IS_OF_TYPE(e, cmpxchgx32)) return "cmpxchgx32";
  else if (IS_OF_TYPE(e, cmpxchgx64)) return "cmpxchgx64";
  else if (IS_OF_TYPE(e, ldmapfd))    return "ldmapfd";
  else if (IS_OF_TYPE(e, ld64))       return "ld64";
  else if (IS_OF_TYPE(e, ldabs8))     return "ldabs8";
  else if (IS_OF_TYPE(e, ldabs16))    return "ldabs16";
  else if (IS_OF_TYPE(e, ldabs32))    return "ldabs32";
  else if (IS_OF_TYPE(e, ldabs64))    return "ldabs64";
  else if (IS_OF_TYPE(e, ldind8))     return "ldind8";
  else if (IS_OF_TYPE(e, ldind16))    return "ldind16";
  else if (IS_OF_TYPE(e, ldind32))    return "ldind32";
  else if (IS_OF_TYPE(e, ldind64))    return "ldind64";
  else if (IS_OF_TYPE(e, ldx8))       return "ldx8";
  else if (IS_OF_TYPE(e, ldx16))      return "ldx16";
  else if (IS_OF_TYPE(e, ldx32))      return "ldx32";
  else if (IS_OF_TYPE(e, ldx64))      return "ldx64";
  else if (IS_OF_TYPE(e, st8))        return "st8";
  else if (IS_OF_TYPE(e, st16))       return "st16";
  else if (IS_OF_TYPE(e, st32))       return "st32";
  else if (IS_OF_TYPE(e, st64))       return "st64";
  else if (IS_OF_TYPE(e, stx8))       return "stx8";
  else if (IS_OF_TYPE(e, stx16))      return "stx16";
  else if (IS_OF_TYPE(e, stx32))      return "stx32";
  else if (IS_OF_TYPE(e, stx64))      return "stx64";
  else if (IS_OF_TYPE(e, stxx8))      return "stxx8";
  else if (IS_OF_TYPE(e, stxx16))     return "stxx16";
  else if (IS_OF_TYPE(e, stxx32))     return "stxx32";
  else if (IS_OF_TYPE(e, stxx64))     return "stxx64";
  else if (IS_OF_TYPE(e, ja))         return "ja";
  else if (IS_OF_TYPE(e, jeq))        return "jeq";
  else if (IS_OF_TYPE(e, jgt))        return "jgt";
  else if (IS_OF_TYPE(e, jge))        return "jge";
  else if (IS_OF_TYPE(e, jlt))        return "jlt";
  else if (IS_OF_TYPE(e, jle))        return "jle";
  else if (IS_OF_TYPE(e, jset))       return "jset";
  else if (IS_OF_TYPE(e, jne))        return "jne";
  else if (IS_OF_TYPE(e, jsgt))       return "jsgt";
  else if (IS_OF_TYPE(e, jsge))       return "jsge";
  else if (IS_OF_TYPE(e, jslt))       return "jslt";
  else if (IS_OF_TYPE(e, jsle))       return "jsle";
  else if (IS_OF_TYPE(e, call))       return "call";
  else if (IS_OF_TYPE(e, rel))        return "rel";
  else if (IS_OF_TYPE(e, exit_ins))   return "exit";
  else if (IS_OF_TYPE(e, jeq32))      return "jeq32";
  else if (IS_OF_TYPE(e, jgt32))      return "jgt32";
  else if (IS_OF_TYPE(e, jge32))      return "jge32";
  else if (IS_OF_TYPE(e, jlt32))      return "jlt32";
  else if (IS_OF_TYPE(e, jle32))      return "jle32";
  else if (IS_OF_TYPE(e, jset32))     return "jset32";
  else if (IS_OF_TYPE(e, jne32))      return "jne32";
  else if (IS_OF_TYPE(e, jsgt32))     return "jsgt32";
  else if (IS_OF_TYPE(e, jsge32))     return "jsge32";
  else if (IS_OF_TYPE(e, jslt32))     return "jslt32";
  else if (IS_OF_TYPE(e, jsle32))     return "jsle32";
  else if (IS_OF_TYPE(e, zext))       return "zext";
  return "type not found";
}

#define get_ops_aux(type, node) (std::any_cast<type>(&node)->ops)

uint get_ops(std::any node) {
  if      (IS_OF_TYPE(node, add))        return get_ops_aux(add,        node);
  else if (IS_OF_TYPE(node, sub))        return get_ops_aux(sub,        node);
  else if (IS_OF_TYPE(node, mul))        return get_ops_aux(mul,        node);
  else if (IS_OF_TYPE(node, div_ins))    return get_ops_aux(div_ins,    node);
  else if (IS_OF_TYPE(node, or_ins))     return get_ops_aux(or_ins,     node);
  else if (IS_OF_TYPE(node, and_ins))    return get_ops_aux(and_ins,    node);
  else if (IS_OF_TYPE(node, lsh))        return get_ops_aux(lsh,        node);
  else if (IS_OF_TYPE(node, rsh))        return get_ops_aux(rsh,        node);
  else if (IS_OF_TYPE(node, neg))        return get_ops_aux(neg,        node);
  else if (IS_OF_TYPE(node, mod))        return get_ops_aux(mod,        node);
  else if (IS_OF_TYPE(node, xor_ins))    return get_ops_aux(xor_ins,    node);
  else if (IS_OF_TYPE(node, mov))        return get_ops_aux(mov,        node);
  else if (IS_OF_TYPE(node, arsh))       return get_ops_aux(arsh,       node);
  else if (IS_OF_TYPE(node, add32))      return get_ops_aux(add32,      node);
  else if (IS_OF_TYPE(node, sub32))      return get_ops_aux(sub32,      node);
  else if (IS_OF_TYPE(node, mul32))      return get_ops_aux(mul32,      node);
  else if (IS_OF_TYPE(node, div32))      return get_ops_aux(div32,      node);
  else if (IS_OF_TYPE(node, or32))       return get_ops_aux(or32,       node);
  else if (IS_OF_TYPE(node, and32))      return get_ops_aux(and32,      node);
  else if (IS_OF_TYPE(node, lsh32))      return get_ops_aux(lsh32,      node);
  else if (IS_OF_TYPE(node, rsh32))      return get_ops_aux(rsh32,      node);
  else if (IS_OF_TYPE(node, neg32))      return get_ops_aux(neg32,      node);
  else if (IS_OF_TYPE(node, mod32))      return get_ops_aux(mod32,      node);
  else if (IS_OF_TYPE(node, xor32))      return get_ops_aux(xor32,      node);
  else if (IS_OF_TYPE(node, mov32))      return get_ops_aux(mov32,      node);
  else if (IS_OF_TYPE(node, arsh32))     return get_ops_aux(arsh32,     node);
  else if (IS_OF_TYPE(node, le16))       return get_ops_aux(le16,       node);
  else if (IS_OF_TYPE(node, le32))       return get_ops_aux(le32,       node);
  else if (IS_OF_TYPE(node, le64))       return get_ops_aux(le64,       node);
  else if (IS_OF_TYPE(node, be16))       return get_ops_aux(be16,       node);
  else if (IS_OF_TYPE(node, be32))       return get_ops_aux(be32,       node);
  else if (IS_OF_TYPE(node, be64))       return get_ops_aux(be64,       node);
  else if (IS_OF_TYPE(node, addx16))     return get_ops_aux(addx16,     node);
  else if (IS_OF_TYPE(node, addx32))     return get_ops_aux(addx32,     node);
  else if (IS_OF_TYPE(node, addx64))     return get_ops_aux(addx64,     node);
  else if (IS_OF_TYPE(node, andx16))     return get_ops_aux(andx16,     node);
  else if (IS_OF_TYPE(node, andx32))     return get_ops_aux(andx32,     node);
  else if (IS_OF_TYPE(node, andx64))     return get_ops_aux(andx64,     node);
  else if (IS_OF_TYPE(node, orx16))      return get_ops_aux(orx16,      node);
  else if (IS_OF_TYPE(node, orx32))      return get_ops_aux(orx32,      node);
  else if (IS_OF_TYPE(node, orx64))      return get_ops_aux(orx64,      node);
  else if (IS_OF_TYPE(node, xorx16))     return get_ops_aux(xorx16,     node);
  else if (IS_OF_TYPE(node, xorx32))     return get_ops_aux(xorx32,     node);
  else if (IS_OF_TYPE(node, xorx64))     return get_ops_aux(xorx64,     node);
  else if (IS_OF_TYPE(node, addfx16))    return get_ops_aux(addfx16,    node);
  else if (IS_OF_TYPE(node, addfx32))    return get_ops_aux(addfx32,    node);
  else if (IS_OF_TYPE(node, addfx64))    return get_ops_aux(addfx64,    node);
  else if (IS_OF_TYPE(node, andfx16))    return get_ops_aux(andfx16,    node);
  else if (IS_OF_TYPE(node, andfx32))    return get_ops_aux(andfx32,    node);
  else if (IS_OF_TYPE(node, andfx64))    return get_ops_aux(andfx64,    node);
  else if (IS_OF_TYPE(node, orfx16))     return get_ops_aux(orfx16,     node);
  else if (IS_OF_TYPE(node, orfx32))     return get_ops_aux(orfx32,     node);
  else if (IS_OF_TYPE(node, orfx64))     return get_ops_aux(orfx64,     node);
  else if (IS_OF_TYPE(node, xorfx16))    return get_ops_aux(xorfx16,    node);
  else if (IS_OF_TYPE(node, xorfx32))    return get_ops_aux(xorfx32,    node);
  else if (IS_OF_TYPE(node, xorfx64))    return get_ops_aux(xorfx64,    node);
  else if (IS_OF_TYPE(node, xchgx16))    return get_ops_aux(xchgx16,    node);
  else if (IS_OF_TYPE(node, xchgx32))    return get_ops_aux(xchgx32,    node);
  else if (IS_OF_TYPE(node, xchgx64))    return get_ops_aux(xchgx64,    node);
  else if (IS_OF_TYPE(node, cmpxchgx16)) return get_ops_aux(cmpxchgx16, node);
  else if (IS_OF_TYPE(node, cmpxchgx32)) return get_ops_aux(cmpxchgx32, node);
  else if (IS_OF_TYPE(node, cmpxchgx64)) return get_ops_aux(cmpxchgx64, node);
  else if (IS_OF_TYPE(node, ldmapfd))    return get_ops_aux(ldmapfd,    node);
  else if (IS_OF_TYPE(node, ld64))       return get_ops_aux(ld64,       node);
  else if (IS_OF_TYPE(node, ldabs8))     return get_ops_aux(ldabs8,     node);
  else if (IS_OF_TYPE(node, ldabs16))    return get_ops_aux(ldabs16,    node);
  else if (IS_OF_TYPE(node, ldabs32))    return get_ops_aux(ldabs32,    node);
  else if (IS_OF_TYPE(node, ldabs64))    return get_ops_aux(ldabs64,    node);
  else if (IS_OF_TYPE(node, ldind8))     return get_ops_aux(ldind8,     node);
  else if (IS_OF_TYPE(node, ldind16))    return get_ops_aux(ldind16,    node);
  else if (IS_OF_TYPE(node, ldind32))    return get_ops_aux(ldind32,    node);
  else if (IS_OF_TYPE(node, ldind64))    return get_ops_aux(ldind64,    node);
  else if (IS_OF_TYPE(node, ldx8))       return get_ops_aux(ldx8,       node);
  else if (IS_OF_TYPE(node, ldx16))      return get_ops_aux(ldx16,      node);
  else if (IS_OF_TYPE(node, ldx32))      return get_ops_aux(ldx32,      node);
  else if (IS_OF_TYPE(node, ldx64))      return get_ops_aux(ldx64,      node);
  else if (IS_OF_TYPE(node, st8))        return get_ops_aux(st8,        node);
  else if (IS_OF_TYPE(node, st16))       return get_ops_aux(st16,       node);
  else if (IS_OF_TYPE(node, st32))       return get_ops_aux(st32,       node);
  else if (IS_OF_TYPE(node, st64))       return get_ops_aux(st64,       node);
  else if (IS_OF_TYPE(node, stx8))       return get_ops_aux(stx8,       node);
  else if (IS_OF_TYPE(node, stx16))      return get_ops_aux(stx16,      node);
  else if (IS_OF_TYPE(node, stx32))      return get_ops_aux(stx32,      node);
  else if (IS_OF_TYPE(node, stx64))      return get_ops_aux(stx64,      node);
  else if (IS_OF_TYPE(node, stxx8))      return get_ops_aux(stxx8,      node);
  else if (IS_OF_TYPE(node, stxx16))     return get_ops_aux(stxx16,     node);
  else if (IS_OF_TYPE(node, stxx32))     return get_ops_aux(stxx32,     node);
  else if (IS_OF_TYPE(node, stxx64))     return get_ops_aux(stxx64,     node);
  else if (IS_OF_TYPE(node, ja))         return get_ops_aux(ja,         node);
  else if (IS_OF_TYPE(node, jeq))        return get_ops_aux(jeq,        node);
  else if (IS_OF_TYPE(node, jgt))        return get_ops_aux(jgt,        node);
  else if (IS_OF_TYPE(node, jge))        return get_ops_aux(jge,        node);
  else if (IS_OF_TYPE(node, jlt))        return get_ops_aux(jlt,        node);
  else if (IS_OF_TYPE(node, jle))        return get_ops_aux(jle,        node);
  else if (IS_OF_TYPE(node, jset))       return get_ops_aux(jset,       node);
  else if (IS_OF_TYPE(node, jne))        return get_ops_aux(jne,        node);
  else if (IS_OF_TYPE(node, jsgt))       return get_ops_aux(jsgt,       node);
  else if (IS_OF_TYPE(node, jsge))       return get_ops_aux(jsge,       node);
  else if (IS_OF_TYPE(node, jslt))       return get_ops_aux(jslt,       node);
  else if (IS_OF_TYPE(node, jsle))       return get_ops_aux(jsle,       node);
  else if (IS_OF_TYPE(node, call))       return get_ops_aux(call,       node);
  else if (IS_OF_TYPE(node, rel))        return get_ops_aux(rel,        node);
  else if (IS_OF_TYPE(node, exit_ins))   return get_ops_aux(exit_ins,   node);
  else if (IS_OF_TYPE(node, jeq32))      return get_ops_aux(jeq32,      node);
  else if (IS_OF_TYPE(node, jgt32))      return get_ops_aux(jgt32,      node);
  else if (IS_OF_TYPE(node, jge32))      return get_ops_aux(jge32,      node);
  else if (IS_OF_TYPE(node, jlt32))      return get_ops_aux(jlt32,      node);
  else if (IS_OF_TYPE(node, jle32))      return get_ops_aux(jle32,      node);
  else if (IS_OF_TYPE(node, jset32))     return get_ops_aux(jset32,     node);
  else if (IS_OF_TYPE(node, jne32))      return get_ops_aux(jne32,      node);
  else if (IS_OF_TYPE(node, jsgt32))     return get_ops_aux(jsgt32,     node);
  else if (IS_OF_TYPE(node, jsge32))     return get_ops_aux(jsge32,     node);
  else if (IS_OF_TYPE(node, jslt32))     return get_ops_aux(jslt32,     node);
  else if (IS_OF_TYPE(node, jsle32))     return get_ops_aux(jsle32,     node);
  else if (IS_OF_TYPE(node, zext))       return get_ops_aux(zext,       node);
  else
    error("type error: type ``" + pp_subtype(node) + "`` not found in "
          "get_ops()");
  return 0;
}

#define get_off_aux(type, node) (std::any_cast<type>(&node)->off)

uint get_off(std::any node) {
  if      (IS_OF_TYPE(node, add))        return get_off_aux(add,        node);
  else if (IS_OF_TYPE(node, sub))        return get_off_aux(sub,        node);
  else if (IS_OF_TYPE(node, mul))        return get_off_aux(mul,        node);
  else if (IS_OF_TYPE(node, div_ins))    return get_off_aux(div_ins,    node);
  else if (IS_OF_TYPE(node, or_ins))     return get_off_aux(or_ins,     node);
  else if (IS_OF_TYPE(node, and_ins))    return get_off_aux(and_ins,    node);
  else if (IS_OF_TYPE(node, lsh))        return get_off_aux(lsh,        node);
  else if (IS_OF_TYPE(node, rsh))        return get_off_aux(rsh,        node);
  else if (IS_OF_TYPE(node, neg))        return get_off_aux(neg,        node);
  else if (IS_OF_TYPE(node, mod))        return get_off_aux(mod,        node);
  else if (IS_OF_TYPE(node, xor_ins))    return get_off_aux(xor_ins,    node);
  else if (IS_OF_TYPE(node, mov))        return get_off_aux(mov,        node);
  else if (IS_OF_TYPE(node, arsh))       return get_off_aux(arsh,       node);
  else if (IS_OF_TYPE(node, add32))      return get_off_aux(add32,      node);
  else if (IS_OF_TYPE(node, sub32))      return get_off_aux(sub32,      node);
  else if (IS_OF_TYPE(node, mul32))      return get_off_aux(mul32,      node);
  else if (IS_OF_TYPE(node, div32))      return get_off_aux(div32,      node);
  else if (IS_OF_TYPE(node, or32))       return get_off_aux(or32,       node);
  else if (IS_OF_TYPE(node, and32))      return get_off_aux(and32,      node);
  else if (IS_OF_TYPE(node, lsh32))      return get_off_aux(lsh32,      node);
  else if (IS_OF_TYPE(node, rsh32))      return get_off_aux(rsh32,      node);
  else if (IS_OF_TYPE(node, neg32))      return get_off_aux(neg32,      node);
  else if (IS_OF_TYPE(node, mod32))      return get_off_aux(mod32,      node);
  else if (IS_OF_TYPE(node, xor32))      return get_off_aux(xor32,      node);
  else if (IS_OF_TYPE(node, mov32))      return get_off_aux(mov32,      node);
  else if (IS_OF_TYPE(node, arsh32))     return get_off_aux(arsh32,     node);
  else if (IS_OF_TYPE(node, le16))       return get_off_aux(le16,       node);
  else if (IS_OF_TYPE(node, le32))       return get_off_aux(le32,       node);
  else if (IS_OF_TYPE(node, le64))       return get_off_aux(le64,       node);
  else if (IS_OF_TYPE(node, be16))       return get_off_aux(be16,       node);
  else if (IS_OF_TYPE(node, be32))       return get_off_aux(be32,       node);
  else if (IS_OF_TYPE(node, be64))       return get_off_aux(be64,       node);
  else if (IS_OF_TYPE(node, addx16))     return get_off_aux(addx16,     node);
  else if (IS_OF_TYPE(node, addx32))     return get_off_aux(addx32,     node);
  else if (IS_OF_TYPE(node, addx64))     return get_off_aux(addx64,     node);
  else if (IS_OF_TYPE(node, andx16))     return get_off_aux(andx16,     node);
  else if (IS_OF_TYPE(node, andx32))     return get_off_aux(andx32,     node);
  else if (IS_OF_TYPE(node, andx64))     return get_off_aux(andx64,     node);
  else if (IS_OF_TYPE(node, orx16))      return get_off_aux(orx16,      node);
  else if (IS_OF_TYPE(node, orx32))      return get_off_aux(orx32,      node);
  else if (IS_OF_TYPE(node, orx64))      return get_off_aux(orx64,      node);
  else if (IS_OF_TYPE(node, xorx16))     return get_off_aux(xorx16,     node);
  else if (IS_OF_TYPE(node, xorx32))     return get_off_aux(xorx32,     node);
  else if (IS_OF_TYPE(node, xorx64))     return get_off_aux(xorx64,     node);
  else if (IS_OF_TYPE(node, addfx16))    return get_off_aux(addfx16,    node);
  else if (IS_OF_TYPE(node, addfx32))    return get_off_aux(addfx32,    node);
  else if (IS_OF_TYPE(node, addfx64))    return get_off_aux(addfx64,    node);
  else if (IS_OF_TYPE(node, andfx16))    return get_off_aux(andfx16,    node);
  else if (IS_OF_TYPE(node, andfx32))    return get_off_aux(andfx32,    node);
  else if (IS_OF_TYPE(node, andfx64))    return get_off_aux(andfx64,    node);
  else if (IS_OF_TYPE(node, orfx16))     return get_off_aux(orfx16,     node);
  else if (IS_OF_TYPE(node, orfx32))     return get_off_aux(orfx32,     node);
  else if (IS_OF_TYPE(node, orfx64))     return get_off_aux(orfx64,     node);
  else if (IS_OF_TYPE(node, xorfx16))    return get_off_aux(xorfx16,    node);
  else if (IS_OF_TYPE(node, xorfx32))    return get_off_aux(xorfx32,    node);
  else if (IS_OF_TYPE(node, xorfx64))    return get_off_aux(xorfx64,    node);
  else if (IS_OF_TYPE(node, xchgx16))    return get_off_aux(xchgx16,    node);
  else if (IS_OF_TYPE(node, xchgx32))    return get_off_aux(xchgx32,    node);
  else if (IS_OF_TYPE(node, xchgx64))    return get_off_aux(xchgx64,    node);
  else if (IS_OF_TYPE(node, cmpxchgx16)) return get_off_aux(cmpxchgx16, node);
  else if (IS_OF_TYPE(node, cmpxchgx32)) return get_off_aux(cmpxchgx32, node);
  else if (IS_OF_TYPE(node, cmpxchgx64)) return get_off_aux(cmpxchgx64, node);
  else if (IS_OF_TYPE(node, ldmapfd))    return get_off_aux(ldmapfd,    node);
  else if (IS_OF_TYPE(node, ld64))       return get_off_aux(ld64,       node);
  else if (IS_OF_TYPE(node, ldabs8))     return get_off_aux(ldabs8,     node);
  else if (IS_OF_TYPE(node, ldabs16))    return get_off_aux(ldabs16,    node);
  else if (IS_OF_TYPE(node, ldabs32))    return get_off_aux(ldabs32,    node);
  else if (IS_OF_TYPE(node, ldabs64))    return get_off_aux(ldabs64,    node);
  else if (IS_OF_TYPE(node, ldind8))     return get_off_aux(ldind8,     node);
  else if (IS_OF_TYPE(node, ldind16))    return get_off_aux(ldind16,    node);
  else if (IS_OF_TYPE(node, ldind32))    return get_off_aux(ldind32,    node);
  else if (IS_OF_TYPE(node, ldind64))    return get_off_aux(ldind64,    node);
  else if (IS_OF_TYPE(node, ldx8))       return get_off_aux(ldx8,       node);
  else if (IS_OF_TYPE(node, ldx16))      return get_off_aux(ldx16,      node);
  else if (IS_OF_TYPE(node, ldx32))      return get_off_aux(ldx32,      node);
  else if (IS_OF_TYPE(node, ldx64))      return get_off_aux(ldx64,      node);
  else if (IS_OF_TYPE(node, st8))        return get_off_aux(st8,        node);
  else if (IS_OF_TYPE(node, st16))       return get_off_aux(st16,       node);
  else if (IS_OF_TYPE(node, st32))       return get_off_aux(st32,       node);
  else if (IS_OF_TYPE(node, st64))       return get_off_aux(st64,       node);
  else if (IS_OF_TYPE(node, stx8))       return get_off_aux(stx8,       node);
  else if (IS_OF_TYPE(node, stx16))      return get_off_aux(stx16,      node);
  else if (IS_OF_TYPE(node, stx32))      return get_off_aux(stx32,      node);
  else if (IS_OF_TYPE(node, stx64))      return get_off_aux(stx64,      node);
  else if (IS_OF_TYPE(node, stxx8))      return get_off_aux(stxx8,      node);
  else if (IS_OF_TYPE(node, stxx16))     return get_off_aux(stxx16,     node);
  else if (IS_OF_TYPE(node, stxx32))     return get_off_aux(stxx32,     node);
  else if (IS_OF_TYPE(node, stxx64))     return get_off_aux(stxx64,     node);
  else if (IS_OF_TYPE(node, ja))         return get_off_aux(ja,         node);
  else if (IS_OF_TYPE(node, jeq))        return get_off_aux(jeq,        node);
  else if (IS_OF_TYPE(node, jgt))        return get_off_aux(jgt,        node);
  else if (IS_OF_TYPE(node, jge))        return get_off_aux(jge,        node);
  else if (IS_OF_TYPE(node, jlt))        return get_off_aux(jlt,        node);
  else if (IS_OF_TYPE(node, jle))        return get_off_aux(jle,        node);
  else if (IS_OF_TYPE(node, jset))       return get_off_aux(jset,       node);
  else if (IS_OF_TYPE(node, jne))        return get_off_aux(jne,        node);
  else if (IS_OF_TYPE(node, jsgt))       return get_off_aux(jsgt,       node);
  else if (IS_OF_TYPE(node, jsge))       return get_off_aux(jsge,       node);
  else if (IS_OF_TYPE(node, jslt))       return get_off_aux(jslt,       node);
  else if (IS_OF_TYPE(node, jsle))       return get_off_aux(jsle,       node);
  else if (IS_OF_TYPE(node, call))       return get_off_aux(call,       node);
  else if (IS_OF_TYPE(node, rel))        return get_off_aux(rel,        node);
  else if (IS_OF_TYPE(node, exit_ins))   return get_off_aux(exit_ins,   node);
  else if (IS_OF_TYPE(node, jeq32))      return get_off_aux(jeq32,      node);
  else if (IS_OF_TYPE(node, jgt32))      return get_off_aux(jgt32,      node);
  else if (IS_OF_TYPE(node, jge32))      return get_off_aux(jge32,      node);
  else if (IS_OF_TYPE(node, jlt32))      return get_off_aux(jlt32,      node);
  else if (IS_OF_TYPE(node, jle32))      return get_off_aux(jle32,      node);
  else if (IS_OF_TYPE(node, jset32))     return get_off_aux(jset32,     node);
  else if (IS_OF_TYPE(node, jne32))      return get_off_aux(jne32,      node);
  else if (IS_OF_TYPE(node, jsgt32))     return get_off_aux(jsgt32,     node);
  else if (IS_OF_TYPE(node, jsge32))     return get_off_aux(jsge32,     node);
  else if (IS_OF_TYPE(node, jslt32))     return get_off_aux(jslt32,     node);
  else if (IS_OF_TYPE(node, jsle32))     return get_off_aux(jsle32,     node);
  else if (IS_OF_TYPE(node, zext))       return get_off_aux(zext,       node);
  else
    error("type error: type ``" + pp_subtype(node) + "`` not found in "
          "get_off()");
  return 0;
}

void pp_ast(void) {
  std::cout << "--------\nPrinting the abstract syntax tree:\n--------"
            << std::endl;
  std::string type, id, subtype;
  for (uint i=0; i<absyn_tree.size(); i++) {
    type    = pp_type(absyn_tree[i].type);
    id      = absyn_tree[i].id;
    subtype = pp_subtype(absyn_tree[i].node_v);
    std::cout << std::setw(7) << std::setfill('0') << i+1 << ": " << id
              << pp_spaces(id, 12) << " " << type << pp_spaces(type, 16)
              << subtype;
    if (absyn_tree[i].type == instr)
      std::cout << pp_spaces(id, 16) << "off="
                << get_off(absyn_tree[i].node_v);
    std::cout << std::endl;
  }
}
