static struct bpf_insn prog[1000000] = {
BPF_ALU64_IMM(BPF_ADD, BPF_REG_0, 128),
BPF_ALU64_REG(BPF_ADD, BPF_REG_0, BPF_REG_1),
BPF_ALU64_IMM(BPF_SUB, BPF_REG_0, 128),
BPF_ALU64_REG(BPF_SUB, BPF_REG_0, BPF_REG_1),
BPF_ALU64_IMM(BPF_MUL, BPF_REG_0, 128),
BPF_ALU64_REG(BPF_MUL, BPF_REG_0, BPF_REG_1),
BPF_ALU64_IMM(BPF_DIV, BPF_REG_0, 128),
BPF_ALU64_REG(BPF_DIV, BPF_REG_0, BPF_REG_1),
BPF_ALU64_IMM(BPF_OR, BPF_REG_0, 128),
BPF_ALU64_REG(BPF_OR, BPF_REG_0, BPF_REG_1),
BPF_ALU64_IMM(BPF_AND, BPF_REG_0, 128),
BPF_ALU64_REG(BPF_AND, BPF_REG_0, BPF_REG_1),
BPF_ALU64_IMM(BPF_LSH, BPF_REG_0, 128),
BPF_ALU64_REG(BPF_LSH, BPF_REG_0, BPF_REG_1),
BPF_ALU64_IMM(BPF_RSH, BPF_REG_0, 128),
BPF_ALU64_REG(BPF_RSH, BPF_REG_0, BPF_REG_1),
BPF_ALU64_REG(BPF_NEG, BPF_REG_8, 0),
BPF_ALU64_IMM(BPF_MOD, BPF_REG_0, 128),
BPF_ALU64_REG(BPF_MOD, BPF_REG_0, BPF_REG_1),
BPF_ALU64_IMM(BPF_XOR, BPF_REG_0, 128),
BPF_ALU64_REG(BPF_XOR, BPF_REG_0, BPF_REG_1),
BPF_ALU64_IMM(BPF_MOV, BPF_REG_0, 128),
BPF_ALU64_REG(BPF_MOV, BPF_REG_0, BPF_REG_1),
BPF_ALU64_IMM(BPF_ARSH, BPF_REG_0, 128),
BPF_ALU64_REG(BPF_ARSH, BPF_REG_0, BPF_REG_1),
BPF_ALU32_IMM(BPF_ADD, BPF_REG_0, 128),
BPF_ALU32_REG(BPF_ADD, BPF_REG_0, BPF_REG_1),
BPF_ALU32_IMM(BPF_SUB, BPF_REG_0, 128),
BPF_ALU32_REG(BPF_SUB, BPF_REG_0, BPF_REG_1),
BPF_ALU32_IMM(BPF_MUL, BPF_REG_0, 128),
BPF_ALU32_REG(BPF_MUL, BPF_REG_0, BPF_REG_1),
BPF_ALU32_IMM(BPF_DIV, BPF_REG_0, 128),
BPF_ALU32_REG(BPF_DIV, BPF_REG_0, BPF_REG_1),
BPF_ALU32_IMM(BPF_OR, BPF_REG_0, 128),
BPF_ALU32_REG(BPF_OR, BPF_REG_0, BPF_REG_1),
BPF_ALU32_IMM(BPF_AND, BPF_REG_0, 128),
BPF_ALU32_REG(BPF_AND, BPF_REG_0, BPF_REG_1),
BPF_ALU32_IMM(BPF_LSH, BPF_REG_0, 128),
BPF_ALU32_REG(BPF_LSH, BPF_REG_0, BPF_REG_1),
BPF_ALU32_IMM(BPF_RSH, BPF_REG_0, 128),
BPF_ALU32_REG(BPF_RSH, BPF_REG_0, BPF_REG_1),
BPF_ALU32_REG(BPF_NEG, BPF_REG_0, 0),
BPF_ALU32_IMM(BPF_MOD, BPF_REG_0, 128),
BPF_ALU32_REG(BPF_MOD, BPF_REG_0, BPF_REG_1),
BPF_ALU32_IMM(BPF_XOR, BPF_REG_0, 128),
BPF_ALU32_REG(BPF_XOR, BPF_REG_0, BPF_REG_1),
BPF_ALU32_IMM(BPF_MOV, BPF_REG_0, 128),
BPF_ALU32_REG(BPF_MOV, BPF_REG_0, BPF_REG_1),
BPF_ALU32_IMM(BPF_ARSH, BPF_REG_0, 128),
BPF_ALU32_REG(BPF_ARSH, BPF_REG_0, BPF_REG_1),
BPF_ENDIAN(BPF_TO_LE, BPF_REG_0, 16),
BPF_ENDIAN(BPF_TO_LE, BPF_REG_0, 32),
BPF_ENDIAN(BPF_TO_LE, BPF_REG_0, 64),
BPF_ENDIAN(BPF_TO_BE, BPF_REG_0, 16),
BPF_ENDIAN(BPF_TO_BE, BPF_REG_0, 32),
BPF_ENDIAN(BPF_TO_BE, BPF_REG_0, 64),
BPF_ATOMIC_OP(16, BPF_ADD, BPF_REG_0, BPF_REG_1, 58),
BPF_ATOMIC_OP(32, BPF_ADD, BPF_REG_0, BPF_REG_1, 59),
BPF_ATOMIC_OP(64, BPF_ADD, BPF_REG_0, BPF_REG_1, 60),
BPF_ATOMIC_OP(16, BPF_AND, BPF_REG_0, BPF_REG_1, 61),
BPF_ATOMIC_OP(32, BPF_AND, BPF_REG_0, BPF_REG_1, 62),
BPF_ATOMIC_OP(64, BPF_AND, BPF_REG_0, BPF_REG_1, 63),
BPF_ATOMIC_OP(16, BPF_OR, BPF_REG_0, BPF_REG_1, 64),
BPF_ATOMIC_OP(32, BPF_OR, BPF_REG_0, BPF_REG_1, 65),
BPF_ATOMIC_OP(64, BPF_OR, BPF_REG_0, BPF_REG_1, 66),
BPF_ATOMIC_OP(16, BPF_XOR, BPF_REG_0, BPF_REG_1, 67),
BPF_ATOMIC_OP(32, BPF_XOR, BPF_REG_0, BPF_REG_1, 68),
BPF_ATOMIC_OP(64, BPF_XOR, BPF_REG_0, BPF_REG_1, 69),
BPF_ATOMIC_OP(16, BPF_ADD | BPF_FETCH, BPF_REG_0, BPF_REG_1, 70),
BPF_ATOMIC_OP(32, BPF_ADD | BPF_FETCH, BPF_REG_0, BPF_REG_1, 71),
BPF_ATOMIC_OP(64, BPF_ADD | BPF_FETCH, BPF_REG_0, BPF_REG_1, 72),
BPF_ATOMIC_OP(16, BPF_AND | BPF_FETCH, BPF_REG_0, BPF_REG_1, 73),
BPF_ATOMIC_OP(32, BPF_AND | BPF_FETCH, BPF_REG_0, BPF_REG_1, 74),
BPF_ATOMIC_OP(64, BPF_AND | BPF_FETCH, BPF_REG_0, BPF_REG_1, 75),
BPF_ATOMIC_OP(16, BPF_OR | BPF_FETCH, BPF_REG_0, BPF_REG_1, 76),
BPF_ATOMIC_OP(32, BPF_OR | BPF_FETCH, BPF_REG_0, BPF_REG_1, 77),
BPF_ATOMIC_OP(64, BPF_OR | BPF_FETCH, BPF_REG_0, BPF_REG_1, 78),
BPF_ATOMIC_OP(16, BPF_XOR | BPF_FETCH, BPF_REG_0, BPF_REG_1, 79),
BPF_ATOMIC_OP(32, BPF_XOR | BPF_FETCH, BPF_REG_0, BPF_REG_1, 80),
BPF_ATOMIC_OP(64, BPF_XOR | BPF_FETCH, BPF_REG_0, BPF_REG_1, 81),
BPF_ATOMIC_OP(16, BPF_XCHG, BPF_REG_0, BPF_REG_1, 82),
BPF_ATOMIC_OP(32, BPF_XCHG, BPF_REG_0, BPF_REG_1, 83),
BPF_ATOMIC_OP(64, BPF_XCHG, BPF_REG_0, BPF_REG_1, 84),
BPF_ATOMIC_OP(16, BPF_CMPXCHG, BPF_REG_0, BPF_REG_1, 85),
BPF_ATOMIC_OP(32, BPF_CMPXCHG, BPF_REG_0, BPF_REG_1, 86),
BPF_ATOMIC_OP(64, BPF_CMPXCHG, BPF_REG_0, BPF_REG_1, 87),
BPF_LD_MAP_FD(BPF_REG_0, 128),
BPF_LD_IMM64(BPF_REG_0, 128),
BPF_LD_ABS(8, 3),
BPF_LD_ABS(16, 3),
BPF_LD_ABS(32, 3),
BPF_LD_ABS(64, 3),
BPF_LD_IND(8, BPF_REG_1, 128),
BPF_LD_IND(16, BPF_REG_1, 128),
BPF_LD_IND(32, BPF_REG_1, 128),
BPF_LD_IND(64, BPF_REG_1, 128),
BPF_LDX_MEM(8, BPF_REG_0, BPF_REG_1, 98),
BPF_LDX_MEM(16, BPF_REG_0, BPF_REG_1, 99),
BPF_LDX_MEM(32, BPF_REG_0, BPF_REG_1, 100),
BPF_LDX_MEM(64, BPF_REG_0, BPF_REG_1, 101),
BPF_ST_MEM(8, BPF_REG_0, 102, 128),
BPF_ST_MEM(16, BPF_REG_0, 103, 128),
BPF_ST_MEM(32, BPF_REG_0, 104, 128),
BPF_ST_MEM(64, BPF_REG_0, 105, 128),
BPF_STX_MEM(8, BPF_REG_0, BPF_REG_1, 106),
BPF_STX_MEM(16, BPF_REG_0, BPF_REG_1, 107),
BPF_STX_MEM(32, BPF_REG_0, BPF_REG_1, 108),
BPF_STX_MEM(64, BPF_REG_0, BPF_REG_1, 109),
BPF_STX_XADD(8, BPF_REG_0, BPF_REG_1, 110),
BPF_STX_XADD(16, BPF_REG_0, BPF_REG_1, 111),
BPF_STX_XADD(32, BPF_REG_0, BPF_REG_1, 112),
BPF_STX_XADD(64, BPF_REG_0, BPF_REG_1, 113),
BPF_JMP_A(113),
BPF_JMP_IMM(BPF_JEQ, BPF_REG_0, 128, 115),
BPF_JMP_REG(BPF_JEQ, BPF_REG_0, BPF_REG_1, 116),
BPF_JMP_IMM(BPF_JGT, BPF_REG_0, 128, 117),
BPF_JMP_REG(BPF_JGT, BPF_REG_0, BPF_REG_1, 118),
BPF_JMP_IMM(BPF_JGE, BPF_REG_0, 128, 119),
BPF_JMP_REG(BPF_JGE, BPF_REG_0, BPF_REG_1, 120),
BPF_JMP_IMM(BPF_JLT, BPF_REG_0, 128, 121),
BPF_JMP_REG(BPF_JLT, BPF_REG_0, BPF_REG_1, 122),
BPF_JMP_IMM(BPF_JLE, BPF_REG_0, 128, 123),
BPF_JMP_REG(BPF_JLE, BPF_REG_0, BPF_REG_1, 124),
BPF_JMP_IMM(BPF_JSET, BPF_REG_0, 128, 125),
BPF_JMP_REG(BPF_JSET, BPF_REG_0, BPF_REG_1, 126),
BPF_JMP_IMM(BPF_JNE, BPF_REG_0, 128, 127),
BPF_JMP_REG(BPF_JNE, BPF_REG_0, BPF_REG_1, 128),
BPF_JMP_IMM(BPF_JSGT, BPF_REG_0, 128, 129),
BPF_JMP_REG(BPF_JSGT, BPF_REG_0, BPF_REG_1, 130),
BPF_JMP_IMM(BPF_JSGE, BPF_REG_0, 128, 131),
BPF_JMP_REG(BPF_JSGE, BPF_REG_0, BPF_REG_1, 132),
BPF_JMP_IMM(BPF_JSLT, BPF_REG_0, 128, 133),
BPF_JMP_REG(BPF_JSLT, BPF_REG_0, BPF_REG_1, 134),
BPF_JMP_IMM(BPF_JSLE, BPF_REG_0, 128, 135),
BPF_JMP_REG(BPF_JSLE, BPF_REG_0, BPF_REG_1, 136),
BPF_CALL_REL(44),
BPF_JMP32_IMM(BPF_JEQ, BPF_REG_0, 128, 138),
BPF_JMP32_REG(BPF_JEQ, BPF_REG_0, BPF_REG_1, 139),
BPF_JMP32_IMM(BPF_JGT, BPF_REG_0, 128, 140),
BPF_JMP32_REG(BPF_JGT, BPF_REG_0, BPF_REG_1, 141),
BPF_JMP32_IMM(BPF_JGE, BPF_REG_0, 128, 142),
BPF_JMP32_REG(BPF_JGE, BPF_REG_0, BPF_REG_1, 143),
BPF_JMP32_IMM(BPF_JLT, BPF_REG_0, 128, 144),
BPF_JMP32_REG(BPF_JLT, BPF_REG_0, BPF_REG_1, 145),
BPF_JMP32_IMM(BPF_JLE, BPF_REG_0, 128, 146),
BPF_JMP32_REG(BPF_JLE, BPF_REG_0, BPF_REG_1, 147),
BPF_JMP32_IMM(BPF_JSET, BPF_REG_0, 128, 148),
BPF_JMP32_REG(BPF_JSET, BPF_REG_0, BPF_REG_1, 149),
BPF_JMP32_IMM(BPF_JNE, BPF_REG_0, 128, 150),
BPF_JMP32_REG(BPF_JNE, BPF_REG_0, BPF_REG_1, 151),
BPF_JMP32_IMM(BPF_JSGT, BPF_REG_0, 128, 152),
BPF_JMP32_REG(BPF_JSGT, BPF_REG_0, BPF_REG_1, 153),
BPF_JMP32_IMM(BPF_JSGE, BPF_REG_0, 128, 154),
BPF_JMP32_REG(BPF_JSGE, BPF_REG_0, BPF_REG_1, 155),
BPF_JMP32_IMM(BPF_JSLT, BPF_REG_0, 128, 156),
BPF_JMP32_REG(BPF_JSLT, BPF_REG_0, BPF_REG_1, 157),
BPF_JMP32_IMM(BPF_JSLE, BPF_REG_0, 128, 158),
BPF_JMP32_REG(BPF_JSLE, BPF_REG_0, BPF_REG_1, 159),
BPF_ZEXT_REG(BPF_REG_0),
BPF_EXIT_INSN(),

};
